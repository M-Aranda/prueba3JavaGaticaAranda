/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.GaticaAranda.software.gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.LinearGradientPaint;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.awt.image.PixelGrabber;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JProgressBar;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.basic.BasicProgressBarUI;

/**
 *
 * @author XZeromarx
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    public App() throws IOException {
        initComponents();
        iniciarRetomarInformacion();
        setLocationRelativeTo(null);
        setResizable(false);
        personalizarBarrasDeProgreso();

        /*
        metodo para que inicializa hilos y asigna valores a los progress bar
        probarHilos();
         */
        probarHilos();
    }

    public void personalizarBarrasDeProgreso() {
        barDiversion.setUI(new GradientPalletProgressBarUI(barDiversion));
        barEnergia.setUI(new GradientPalletProgressBarUI(barEnergia));
        barHambre.setUI(new GradientPalletProgressBarUI(barHambre));
        barSalud.setUI(new GradientPalletProgressBarUI(barSalud));
        Border bor = new LineBorder(Color.BLACK);

        barDiversion.setBorder(bor);
        barEnergia.setBorder(bor);
        barHambre.setBorder(bor);
        barSalud.setBorder(bor);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        barEnergia = new javax.swing.JProgressBar();
        barDiversion = new javax.swing.JProgressBar();
        barHambre = new javax.swing.JProgressBar();
        barSalud = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        pnlMascota = new javax.swing.JPanel();
        tbdPaneOpciones = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        tglBtnDormirPou = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        btnJugar = new javax.swing.JButton();
        btnCorrer = new javax.swing.JButton();
        btnEjercitar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cmbComida = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        cmbPociones = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        barEnergia.setMaximum(1000);

        barDiversion.setMaximum(1000);

        barHambre.setMaximum(1000);

        barSalud.setMaximum(1000);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Energía:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Divesión:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Hambre:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Salud:");

        pnlMascota.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout pnlMascotaLayout = new javax.swing.GroupLayout(pnlMascota);
        pnlMascota.setLayout(pnlMascotaLayout);
        pnlMascotaLayout.setHorizontalGroup(
            pnlMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlMascotaLayout.setVerticalGroup(
            pnlMascotaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        tbdPaneOpciones.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N

        tglBtnDormirPou.setText("Dormir al Pou");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(tglBtnDormirPou)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(145, 145, 145)
                .addComponent(tglBtnDormirPou)
                .addContainerGap(192, Short.MAX_VALUE))
        );

        tbdPaneOpciones.addTab("Energía", jPanel5);

        btnJugar.setText("Jugar");

        btnCorrer.setText("Correr");

        btnEjercitar.setText("Ejercitar");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnJugar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(btnCorrer, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(btnEjercitar)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnJugar)
                    .addComponent(btnCorrer)
                    .addComponent(btnEjercitar))
                .addGap(184, 184, 184))
        );

        tbdPaneOpciones.addTab("Diversión", jPanel6);

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel8.setText("Elija comida para su pou!");

        cmbComida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setText("Seleccionar");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(cmbComida, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap(101, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbComida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addContainerGap(279, Short.MAX_VALUE))
        );

        tbdPaneOpciones.addTab("Hambre", jPanel4);

        cmbPociones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Pociones de salud disponibles");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton1.setText("Seleccionar");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cmbPociones, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1)
                    .addComponent(cmbPociones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(277, Short.MAX_VALUE))
        );

        tbdPaneOpciones.addTab("Salud", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(barEnergia, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(barHambre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(barSalud, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(barDiversion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(pnlMascota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbdPaneOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barEnergia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barHambre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(barSalud, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barDiversion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(22, 22, 22)
                .addComponent(pnlMascota, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(tbdPaneOpciones, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        tbdPaneOpciones.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        try {
            guardarFechaHoraDeCierre();

            System.exit(0);
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_formWindowClosing

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            guardarFechaHoraDeApertura();
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new App().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barDiversion;
    private javax.swing.JProgressBar barEnergia;
    private javax.swing.JProgressBar barHambre;
    private javax.swing.JProgressBar barSalud;
    private javax.swing.JButton btnCorrer;
    private javax.swing.JButton btnEjercitar;
    private javax.swing.JButton btnJugar;
    private javax.swing.JComboBox<String> cmbComida;
    private javax.swing.JComboBox<String> cmbPociones;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel pnlMascota;
    private javax.swing.JTabbedPane tbdPaneOpciones;
    private javax.swing.JToggleButton tglBtnDormirPou;
    // End of variables declaration//GEN-END:variables

    private void iniciarRetomarInformacion() throws FileNotFoundException, IOException {

        Properties p = new Properties();

        File config = new File("config.barsProperties");

        if (config.exists()) {
            System.out.println("se leyó el archivo");
            //si se encuentra, se leen los datos que contiene
            FileReader fr = new FileReader(config);

            p.load(fr);
            String energia = p.getProperty("energia");
            System.out.println("se leyó energía " + energia);
            String hambre = p.getProperty("hambre");
            System.out.println("se leyó hambre " + hambre);
            String salud = p.getProperty("salud");
            System.out.println("se leyó salud " + salud);
            String diversion = p.getProperty("diversion");
            System.out.println("se leyó diversion " + diversion);
//                Ver la manera en que se guarde la fecha/hora apertura al abrir el juego y viceversa
//                String fechaApertura = fecha; ->cuando se abra el "juego"
//                String fechaCierre = fecha; -> cuando se cierre el "juego"
//                String horaApertura = hora; ->cuando se abra el "juego"
//                String horaCierre = hora; -> cuando se cierre el "juego"

            //Se setean valores por defecto, agregar a un hilo cada uno...
//            **Analizando el Pou original, el hambre y la energía decaen en proporciones
//            **similares(un poco más el hambre que la energía). Despues de 45 min, el
//            **hambre y la energía disminuyen aproximadamente un 10% del total. Mientras que
//            **la salud y la diversión no decaen hasta que el hambre y la salud bajan un 30% aproximadamente.
//            **El juego inicia con todos los datos a la  mitad
//            **Minimo de JProgressBar = 0 / Maximo = 1000
            barEnergia.setValue(Integer.parseInt(energia));
            barHambre.setValue(Integer.parseInt(hambre));
            barSalud.setValue(Integer.parseInt(salud));
            barDiversion.setValue(Integer.parseInt(diversion));
        } else {
            //si no, se crea uno con datos por defecto
            crearProperties();

        }

    }

    private void probarHilos() {

        HiloEnergia hE = new HiloEnergia();
        hE.start();
        HiloDiversion hD = new HiloDiversion();
        hD.start();
        HiloSalud hS = new HiloSalud();
        hS.start();
        HiloHambre hH = new HiloHambre();
        hH.start();

    }

    private void crearProperties() {

        Properties prop = new Properties();

        prop.put("energia", "500");
        prop.put("hambre", "500");
        prop.put("salud", "500");
        prop.put("diversion", "500");

        File archivo = new File("config.barsProperties");
        try {
            FileWriter fw = new FileWriter(archivo);
            prop.store(fw, "Estadisticas Pou");
            fw.close();
        } catch (IOException iOException) {
        }
        barDiversion.setValue(Integer.parseInt(prop.getProperty("diversion")));
        barHambre.setValue(Integer.parseInt(prop.getProperty("hambre")));
        barSalud.setValue(Integer.parseInt(prop.getProperty("salud")));
        barEnergia.setValue(Integer.parseInt(prop.getProperty("energia")));

    }

    private void guardarFechaHoraDeCierre() throws IOException {

        Calendar c = Calendar.getInstance();
        String fecha = c.get(c.DATE) + "" + c.get(c.MONTH) + "" + c.get(c.YEAR);
        String hora = c.get(c.HOUR_OF_DAY) + "" + c.get(c.MINUTE) + "" + c.get(c.SECOND);

        Properties p = new Properties();
        File configFechaCierre = new File("config.fechaCierre");

        if (configFechaCierre.exists()) {
            FileWriter fw = new FileWriter(configFechaCierre);
            p.setProperty("fecha", fecha);
            p.setProperty("hora", hora);

            p.store(fw, "Fecha cierre Pou");
            fw.close();
        } else {
            FileWriter fw = new FileWriter(configFechaCierre);
            p.put("fecha", fecha);
            p.put("hora", hora);

            p.store(fw, "Fecha cierre Pou");
            fw.close();
        }

    }

    private void guardarFechaHoraDeApertura() throws IOException {
        Calendar c = Calendar.getInstance();
        String fecha = c.get(c.DATE) + "" + c.get(c.MONTH) + "" + c.get(c.YEAR);
        String hora = c.get(c.HOUR_OF_DAY) + "" + c.get(c.MINUTE) + "" + c.get(c.SECOND);

        Properties p = new Properties();
        File configFechaApertura = new File("config.fechaApertura");

        if (configFechaApertura.exists()) {
            FileWriter fw = new FileWriter(configFechaApertura);
            p.setProperty("fecha", fecha);
            p.setProperty("hora", hora);

            p.store(fw, "Fecha apertura Pou");
            fw.close();
        } else {
            FileWriter fw = new FileWriter(configFechaApertura);
            p.put("fecha", fecha);
            p.put("hora", hora);

            p.store(fw, "Fecha apertura Pou");
            fw.close();
        }
    }

    private class HiloHambre extends Thread {

        private int cont;

        @Override
        public void run() {
            while (true) {
                cont = 1;
                int valorBarraHambre = barHambre.getValue() - cont;
                barHambre.setValue(valorBarraHambre);
                try {

                    Properties p = new Properties();
                    File config = new File("config.barsProperties");
                    FileWriter fw = new FileWriter(config);

                    p.setProperty("hambre", String.valueOf(valorBarraHambre));
                    p.setProperty("energia", String.valueOf(barEnergia.getValue()));
                    p.setProperty("salud", String.valueOf(barSalud.getValue()));
                    p.setProperty("diversion", String.valueOf(barDiversion.getValue()));

                    p.store(fw, "Propiedades Pou");
                    fw.close();

                    Thread.sleep(100);
                } catch (IOException | InterruptedException ex) {

                }

            }

        }

    }

    private class HiloEnergia extends Thread {

        private int cont;

        @Override
        public void run() {
            while (true) {
                cont = 1;
                int valorBarraEnergia = barEnergia.getValue() - cont;
                barEnergia.setValue(valorBarraEnergia);
                try {
                    Properties p = new Properties();
                    File config = new File("config.barsProperties");
                    FileWriter fw = new FileWriter(config);

                    p.setProperty("energia", String.valueOf(valorBarraEnergia));
                    p.setProperty("hambre", String.valueOf(barHambre.getValue()));
                    p.setProperty("salud", String.valueOf(barSalud.getValue()));
                    p.setProperty("diversion", String.valueOf(barDiversion.getValue()));

                    p.store(fw, "Propiedades Pou");
                    fw.close();

                    Thread.sleep(500);
                } catch (IOException | InterruptedException ex) {

                }

            }

        }
    }

    private class HiloSalud extends Thread {

        private int cont;

        @Override
        public void run() {
            while (true) {
                cont = 1;
                int valorBarraSalud = barSalud.getValue() - cont;
                barSalud.setValue(valorBarraSalud);
                try {
                    Properties p = new Properties();
                    File config = new File("config.barsProperties");
                    FileWriter fw = new FileWriter(config);

                    p.setProperty("salud", String.valueOf(valorBarraSalud));
                    p.setProperty("energia", String.valueOf(barEnergia.getValue()));
                    p.setProperty("hambre", String.valueOf(barHambre.getValue()));
                    p.setProperty("diversion", String.valueOf(barDiversion.getValue()));

                    p.store(fw, "Propiedades Pou");
                    fw.close();
                    Thread.sleep(1000);
                } catch (IOException | InterruptedException ex) {

                }

            }

        }
    }

    private class HiloDiversion extends Thread {

        private int cont;

        @Override
        public void run() {
            while (true) {
                cont = 1;
                int valorBarraDiversion = barDiversion.getValue() - cont;
                barDiversion.setValue(valorBarraDiversion);
                try {
                    Properties p = new Properties();
                    File config = new File("config.barsProperties");
                    FileWriter fw = new FileWriter(config);

                    p.setProperty("diversion", String.valueOf(valorBarraDiversion));
                    p.setProperty("energia", String.valueOf(barEnergia.getValue()));
                    p.setProperty("salud", String.valueOf(barSalud.getValue()));
                    p.setProperty("hambre", String.valueOf(barHambre.getValue()));

                    p.store(fw, "Propiedades Pou");
                    fw.close();

                    Thread.sleep(250);
                } catch (IOException | InterruptedException ex) {

                }

            }
        }

    }

    class GradientPalletProgressBarUI extends BasicProgressBarUI {

        private final int[] pallet;
        private JProgressBar barra;

        public GradientPalletProgressBarUI(JProgressBar barra) {
            super();
            this.barra = barra;
            this.pallet = makeGradientPallet();
        }

        private int[] makeGradientPallet() {
            BufferedImage image = new BufferedImage(100, 1, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2 = image.createGraphics();
            Point2D start = new Point2D.Float(0f, 0f);
            Point2D end = new Point2D.Float(99f, 0f);
            float[] dist = {0.0f, 0.5f, 1.0f};
            Color[] colors = {Color.RED, Color.ORANGE, Color.GREEN};
            g2.setPaint(new LinearGradientPaint(start, end, dist, colors));
            g2.fillRect(0, 0, 100, 1);
            g2.dispose();

            int width = image.getWidth(null);
            int[] pallet = new int[width];
            PixelGrabber pg = new PixelGrabber(image, 0, 0, width, 1, pallet, 0, width);
            try {
                pg.grabPixels();
            } catch (Exception e) {
                e.printStackTrace();
            }
            return pallet;
        }

        private Color getColorFromPallet(int[] pallet, float x) {
            if (x < 0.0 || x > 1.0) {
                throw new IllegalArgumentException("Parameter outside of expected range");
            }
            int i = (int) (pallet.length * x);
            int max = pallet.length - 1;
            int index = i < 0 ? 0 : i > max ? max : i;
            int pix = pallet[index] & 0x00ffffff | (0x64 << 24);
            return new Color(pix, true);
        }

        @Override
        public void paintDeterminate(Graphics g, JComponent c) {
            if (!(g instanceof Graphics2D)) {
                return;
            }
            Insets b = barra.getInsets(); // area for border
            int barRectWidth = barra.getWidth() - (b.right + b.left);
            int barRectHeight = barra.getHeight() - (b.top + b.bottom);
            if (barRectWidth <= 0 || barRectHeight <= 0) {
                return;
            }
            int cellLength = getCellLength();
            int cellSpacing = getCellSpacing();
            // amount of progress to draw
            int amountFull = getAmountFull(b, barRectWidth, barRectHeight);

            if (barra.getOrientation() == JProgressBar.HORIZONTAL) {
                // draw the cells
                float x = amountFull / (float) barRectWidth;
                g.setColor(getColorFromPallet(pallet, x));
                g.fillRect(b.left, b.top, amountFull, barRectHeight);

            } else { // VERTICAL
                //...
            }
            // Deal with possible text painting
            if (barra.isStringPainted()) {
                paintString(g, b.left, b.top, barRectWidth, barRectHeight, amountFull, b);
            }
        }
    }

}
